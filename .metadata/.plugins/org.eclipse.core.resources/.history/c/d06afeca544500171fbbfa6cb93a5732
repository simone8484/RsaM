package com.gestioneStruttura.controller;


import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.gestioneStruttura.model.*;
import com.gestioneUtente.model.Utente;
import com.gestioneUtente.model.OperatoreSanitario;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Criteria;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;


/**
 * Servlet implementation class GestioneStrutturaHandler
 */
@WebServlet("/GestioneStrutturaHandler.do")
public class GestioneStrutturaHandler extends HttpServlet {
	private static final long serialVersionUID = 1L;
	LinkedList<OperatoreSanitario> listaMediciQualifica = new LinkedList<OperatoreSanitario>();

       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public GestioneStrutturaHandler() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		String action = request.getParameter("action");
		String page = null;
		
		if (action.equals("nuovoReparto")){ 
			page = "nuovoReparto.jsp";
		
		}
		
		if (action.equals("listaReparti")){ 
			page = "listaReparti.jsp";
			
		}
		
		if (action.equals("ubicazioneOspiti")){ 
			page = "ubicazioneOspite.jsp";
			
		}
		
		
		if (action.equals("personaleReparto")){ 
			page = "personaleReparto.jsp";
			
		}
		
		if (action.equals("creaReparto")){ 
			page = "repartoCorrente.jsp";
			Configuration config1 = new Configuration().configure();
			ServiceRegistry servReg1 = new StandardServiceRegistryBuilder().applySettings(config1.getProperties()).build();
			SessionFactory factory1 = config1.buildSessionFactory(servReg1);
			Session session1 = factory1.openSession();
			session1.beginTransaction();
			
			Reparto reparto = Struttura.getInstance().creaReparto(request.getParameter("nome"), request.getParameter("tipologia"), request.getParameter("collocazioneFisica"), Integer.parseInt(request.getParameter("numeroStanzeSingole")), Integer.parseInt(request.getParameter("numeroStanzeDoppie")));
			session1.save(reparto);
			session1.getTransaction().commit();
			session1.close();
			
			request.setAttribute("repartoCorrente", reparto);
			
		}
		
		if (action.equals("visualizzaListaMedici")){ 
			page = "repartoCorrente.jsp";
			
			Configuration config = new Configuration().configure();
			ServiceRegistry servReg = new StandardServiceRegistryBuilder().applySettings(config.getProperties()).build();
			SessionFactory factory = config.buildSessionFactory(servReg);
			
			Session session = factory.openSession();
			org.hibernate.Transaction tr = session.beginTransaction();
			
			Criteria criteria = session.createCriteria(OperatoreSanitario.class);
			List medici = criteria.list();
			
			
			tr.commit();
			session.close();
			
			Iterator itr = medici.iterator();
			while (itr.hasNext()) {

				OperatoreSanitario op = (OperatoreSanitario) itr.next();
				if(op.getQualifica().equals(request.getParameter("qualifica"))){
					listaMediciQualifica.add(op);
				}
				
				request.setAttribute("listaMediciQualifica", listaMediciQualifica);
			}
		}
		
		RequestDispatcher view = request.getRequestDispatcher(page);
		view.forward(request, response);
		
	}

}
